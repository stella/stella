# OTS NGINX CONFIG - 2011-12-25
#
# Two variables: HOSTNAME, IPADDRESS
#
user daemon;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    # multi_accept on;
    # accept_mutex off; # "on" if nginx worker_processes > 1
    # use epoll; # enable for Linux 2.6+
    # use kqueue; # enable for FreeBSD, OSX
}

http {
  include       mime.types;
  access_log  /var/log/nginx/access.log combined;

  server_names_hash_bucket_size 64;

  sendfile        on;

  # These are good default values.
  tcp_nopush        on;
  tcp_nodelay       on;

  # output compression saves bandwidth
  gzip            on;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_proxied any;
  gzip_min_length 15;
  gzip_buffers 16 8k;
  gzip_types      text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json application/x-yaml;

  # TODO: Possibly disable behind ELB
  # http://portertech.ca/nginx-serving-static-content-with-style
  keepalive_timeout  35;

  add_header          X-Frame-Options DENY;

  #include /etc/nginx/conf.d/*.conf;

  upstream stella {
    #server 127.0.0.1:7143;
    server unix:/var/run/stella/thin_stella.0.sock fail_timeout=2s;
    server unix:/var/run/stella/thin_stella.1.sock fail_timeout=2s;
  }

  server {

    listen IPADDRESS:80 default;

    client_max_body_size 5M;

    root /var/www/public/web;

    error_page 403 404 500 502 503 504  /cripes.html;

    # Do this for any host name. SSL only, and only this site/domain
    rewrite  ^/(.*)$  https://HOSTNAME/$1  permanent;
  }

  server {
    server_name HOSTNAME;
    listen IPADDRESS:443;
    ssl on;
    ssl_certificate /etc/pki/tls/certs/HOSTNAME-combined.crt;
    ssl_certificate_key /etc/pki/tls/private/HOSTNAME.key;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Only strong ciphers in PFS mode
    # via https://github.com/ioerror/duraconf/blob/master/configs/nginx/nginx.conf
    #ssl_ciphers ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA;
    ssl_protocols SSLv3 TLSv1;

    # via http://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    ssl_ciphers RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    client_max_body_size 5M;

    root /var/www/public/web;

    # Some clients send bad (non root) favicon.ico requests
    rewrite ^/(.*)/favicon.ico$ /favicon.ico last;

    #error_page 404 /404.html
    error_page 403 500 502 503 504  /cripes.html;

    location ~ ^/t/(.*)$ {
      alias /var/www/thumbnails/$1;
      break;
    }

    location ~* \.(ico|css|js|gif|jpe?g|png)(\?[0-9A-Z]+)?$ {
      access_log   off;
      expires 7d;
      break;
    }

    if ($host = 'www.HOSTNAME' ) {
      rewrite  ^/(.*)$  https://HOSTNAME/$1  permanent;
    }

    location / {
      proxy_set_header  X-Real-IP  $remote_addr;

      # an HTTP header important enough to have its own Wikipedia entry:
      #   http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # enable this if and only if you use HTTPS, this helps Rack
      # set the proper protocol for doing redirects:
      proxy_set_header X-Scheme $scheme;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll stuff.  It's also safe to set if you're
      # using only serving fast clients with Unicorn + nginx.
      # Otherwise you _want_ nginx to buffer responses to slow
      # clients, really.
      # proxy_buffering off;

      # If the file exists as a static file serve it directly without
      # running all the other rewrite tests on it
      if (-f $request_filename) {
        break;
      }
      if (!-f $request_filename) {
        proxy_pass http://stella;
        break;
      }
    }

  }



}

